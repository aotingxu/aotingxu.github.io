{"categories":[{"title":"产品分析","uri":"https://aotingxu.github.io/categories/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90/"},{"title":"产品管理","uri":"https://aotingxu.github.io/categories/%E4%BA%A7%E5%93%81%E7%AE%A1%E7%90%86/"},{"title":"产品设计","uri":"https://aotingxu.github.io/categories/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"},{"title":"敏捷管理","uri":"https://aotingxu.github.io/categories/%E6%95%8F%E6%8D%B7%E7%AE%A1%E7%90%86/"},{"title":"教程总结","uri":"https://aotingxu.github.io/categories/%E6%95%99%E7%A8%8B%E6%80%BB%E7%BB%93/"},{"title":"系统说明","uri":"https://aotingxu.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AF%B4%E6%98%8E/"},{"title":"能力提升","uri":"https://aotingxu.github.io/categories/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"},{"title":"能力模型","uri":"https://aotingxu.github.io/categories/%E8%83%BD%E5%8A%9B%E6%A8%A1%E5%9E%8B/"}],"posts":[{"content":"个人知识管理 个人知识管理 (PKM，Personal Knowledge Management) 是将个人拥有的各种资料、随手可得的信息变成更具价值的知识，最终利于自己的工作、生活。\n通过对个人知识的管理，人们可以养成良好的学习习惯，增强信息素养，完善自己的专业知识体系，提高自己的竞争能力，为实现个人价值和可持续发展打下坚实基础。\n为什么进行持续阅读 知识体系化最好的方式，我认为就是读书，因为书籍内容本身就有体系、有目录，这样不至于让读者管中窥豹、以偏概全，吸收的知识更全面，对读者构建自己的知识体系也有参考作用。另外就是书籍本身和网上那些快餐文章不同，首先，能出书的必定不是泛泛之辈，他们的阅历、眼界已经达到一定程度，所以他们输出的东西含金量更高。其次，书是作者经过深度思考和实践总结，并且花很长时间，集合很多人的力量反复打磨出来的东西，势必要比那些只花几天甚至几个小时写出的文章要更经得起推敲。\n从2019入职以来保持阅读的热情，定期规划调整书籍清单及阅读优先级，定期复盘总结知识体系框架。\n2019已读 2020实现及规划 也通过很多方式寻找了豆瓣评分/业界牛人推荐的书籍进行了个人持续阅读书单的梳理，如下图：\n 读书是构建理论层面的知识体系的方法，而要内化为自己的真正在关键时刻能排上用场的经验，还必然要加上实践，没有实践的知识只是纸上谈兵罢了。   不忘初心，持续沉淀\n","id":0,"section":"posts","summary":"个人知识管理 个人知识管理 (PKM，Personal Knowledge Management) 是将个人拥有的各种资料、随手可得的信息变成更具价值的知识，最终利于自己的工作、生活。 通","tags":["领域知识","能力提升"],"title":"个人读书知识清单——持续阅读","uri":"https://aotingxu.github.io/2020/07/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86-%E6%8C%81%E7%BB%AD%E9%98%85%E8%AF%BB/","year":"2020"},{"content":"针对新增的流程性较强的功能，最好输出业务功能流程图/技术方案流程图 以便PO和技术更好沟通并理解功能，明确业务边界，验收标准，开发项优先级等，也可做为用户手册、项目对接培训、业务梳理等的知识沉淀储备。\n拆特性方法：   明确业务闭环效果——原型设计展示，注意细节说明，同时以便测试人员进行业务链条整体测试和了解部分需要回归测试的内容——上级/PO\n按照完整业务链条，按照业务链条进行拆分和整合（以便故事更好拆分）——事件节点\n  拆故事方法： • 描述三要素——提供明确的验收标准细节。（作为一个用户角色，想要做什么，达到什么效果） 如：作为lowcode平台管理员/应用拥有者/应用开发者，点击数据源虚拟字段条件表达式，在条件表达式客户端内可自定义计算规则，支持常量（大小写字母/数字）和变量（当前数据源模型字段），规则支持基本四则运算和join函数，同时支持表达式规范的校验，以实现用户高效率且友好体验的录入表达式内容，支持复杂计算逻辑的定义。 注：权限相关的故事最好加上用户角色进行描述。 • 原则：独立的、可商谈的（有边界）、有价值的、可估算的（可量化）、较小的、可测试的——PO 1. 偏技术类故事 a. 问技术负责人可分为哪几部分，让他们补充最终的效果，po能理解即可，注意先后级联关系，确保控制优先级 2. 偏业务类故事 a. 业务功能链（有先后制约关系）——模型支持Oracle数据库 b. 所属模块划分（平级关系、跨层次配合）——模型独立/数据源API增删改查 c. 按操作/交互切分切分（步骤条等）——新建模型/数据源配置 d. 按不同界面划分——事件流节点属性面板 e. 按动态配置/级联控制项划分——数据类型级联控制（长度、默认组件、默认值、小数位数） 3. 针对优化任务，可合并同一模块相关的内容建立优化此模块的功能故事  故事拆多大合适 故事可以怎么拆 拆任务方法： •对接联调——技术/PO • XX任务前后端对接 • 按照功能实现要求，前后端功能任务分别对接（√）尽量避免如下拆分法： ○ 导出-前端 ○ 导出-后端  如何评估故事拆分是否合理 按照一定模式拆分完还需考虑具体实现是否合理，可用以下判断法判断是否需要调整更换另外一种拆分方式。 ","id":1,"section":"posts","summary":"针对新增的流程性较强的功能，最好输出业务功能流程图/技术方案流程图 以便PO和技术更好沟通并理解功能，明确业务边界，验收标准，开发项优先级等，","tags":["产品管理"],"title":"敏捷用户故事拆分方法","uri":"https://aotingxu.github.io/2020/06/%E6%95%8F%E6%8D%B7%E6%95%85%E4%BA%8B%E6%8B%86%E5%88%86%E6%96%B9%E6%B3%95/","year":"2020"},{"content":"B端产品人需要具备什么核心能力？ 作为B端产品经理，工作的首要目标是通过产品方案帮助企业解决相关的业务问题，工作要点如下：\n 分析并诊断业务问题 -\u0026gt;设计解决方案-\u0026gt; 执行并优化解决方案 B端产品经理面临的第一大挑战，是如何正确的分析诊断业务问题 B端产品经理面临的第二大挑战，是如何通过软件产品解决业务问题。  如何研究一款成熟的商业软件产品？ 软件设计的模式和方法都是相同的，例如：典型的权限管理、元数据管理、机构管理、数据字典管理，这些B端产品共同的要素，在任何成熟的管理软件系统中都有非常经典的设计方案。\n学习成熟软件，可以从以下几个角度入手拆解，研究其设计思想：\n 首先，研究B端产品通用功能是如何设计的，例如：角色、权限管理、系统参数配置、数据字典管理。这些功能模块在任何B端产品设计中都是相同的。 其次，研究常见功能组件的应用功能和交互设计，例如：列表页的设计思路、报表模块的设计思路、消息中心与提醒机制的设计思路。 最后，研究软件模块背后的设计思想，这需要先理解业务模式、业务流程，业务中常见的管理难题和运营问题。然后揣摩软件系统为什么这样设计功能模块，如何设计的管理模式，如何支持的业务。这个版块难度较大，新人可能无从下手，但应该尽量尝试去分析，不懂之处要多和同行探讨。  B端知识体系总结 ","id":2,"section":"posts","summary":"B端产品人需要具备什么核心能力？ 作为B端产品经理，工作的首要目标是通过产品方案帮助企业解决相关的业务问题，工作要点如下： 分析并诊断业务问题 -","tags":["产品设计","产品学习"],"title":"《决胜B端》精选总结","uri":"https://aotingxu.github.io/2020/06/%E5%86%B3%E8%83%9Cb%E7%AB%AF%E7%B2%BE%E9%80%89%E6%80%BB%E7%BB%93/","year":"2020"},{"content":"前言 所有的产品设计，本质上都是对于一些数据、内容、结构层、信息做一些交互，这是产品的本质。\n增（新增） 做新增功能时，从以下角度考虑：\n 上下限 / 建议值 / 默认值  字数输入的上下限、图片/视频大小，考虑前后端是否都需要做限制校验。 图片/视频尺寸、图片/视频比例，给建议值及要求。 一些低频选项，可以给默认值，无需每次都操作。（例：性别默认男，城市默认当前定位点，是否必输）   类型校验 / 格式校验  例如：输入类型的全角和半角，可做自动转换提高体验。 导入表格的功能，那就限制只能上传Excel格式的文件。另外，.apk、.exe等可执行文件，需要特殊处理。   容错机制 / 关联变化  手机号已被其他账号绑定，需让用户可做更换绑定、合并账号等操作。 昵称被占用，给多个建议昵称，让用户手动选择。 自动保存为草稿、编辑状态下阻止浏览器关闭等。 自动生成编号、排序方式，关联出现的状态及页面变化。   新增后联动变化  数据会增加到怎样的一个量，当这些量增加到一定程度时页面需要怎样的表现形式。 数据持续增加时，是按数量来固定分页，还是按照页面的长度来分页，还是根本就不用分页。      \u0026ldquo;新增\u0026quot;设计细节:    增加按钮的样式、位置 增加按钮的文案：添加、创建、新建？ 增加内容的字段 字段的必填非必填说明 字段的验证、提示说明 界面排列的说明 弹窗还是当前页跳转？ \u0026hellip;  删（删除） 删除操作比新增操作风险大，但逻辑相对简单，有以下四种情况：\n 删除是否可逆  需求上可逆、需求上不可逆 逻辑上可逆、逻辑上不可逆 哪些不能删，删完之后数据会呈现怎么样形态等   是否批量删除 是否涉及权限 前端删除 or 后端删除（是否给予删除警告提示影响范围/结果） 删除范围：可将删除范围设置为默认配置项，包括删除选中/全部/第一个/自定义。    \u0026ldquo;删除\u0026quot;设计细节:    删除按钮的样式、位置 删除案例的文案： 删除 删除时是否要确认？确认窗口的样式 删除完以后界面布局的变化 前端/后端删除 界删除之后是否会影响到其他的功能模块？ \u0026hellip;  改（修改/编辑） 包括修改、编辑，需要注意以下两点：\n 能否修改  是否拥有权限修改。 对原有数据的修改：哪些元素可修改，哪些一旦确定就不可修改，如用户ID不可修改。   保存机制  定时保存。 失去焦点时保存。 其他条件触发，比如网络变化等。      \u0026ldquo;修改\u0026quot;设计细节:    编辑按钮的样式、位置 编辑按钮的文案： 修改、编辑？ 弹窗还是当前页面跳转？ 可以修改与不可修改的说明 更改数据之后，对其他功能模块的影响 \u0026hellip;  查（查询/搜索） 包括查询、搜索，需要注意以下两点：\n 查询  实时查询，用于小数据量场景。 定时任务查询，用于数据量大，关联表多的情况。历史数据直接读取已经查出来的数据，避免每次查询都是多表联查，可提高查询速度，降低服务器压力。  当开发皱着眉跟你说，这个表格字段太多，查询会卡死服务器，就说：跑个定时吧，亲~   查询频率，多长时间查一次，根据情况定义。 查询速度，查询速度慢的，需要优化。   筛选 / 搜索  多条件组合筛选 模糊搜索、精确搜索 下拉框可搜可选      \u0026ldquo;查询\u0026quot;设计细节:    按照哪些字段进行排序？ 搜索框：需要对哪些进行搜索？是否可以组合搜索？搜索后的界面如何程序？模糊搜索还是精确搜索？ 搜索结果的展示如何？是否和搜索条件有关系？ 搜索条件之间是否有冲突？ 查不到数据该如何？ 需要查看哪些数据？ \u0026hellip;  显（显示） 其他六字都服务于\u0026quot;显\u0026quot;字，是七字真言的舵手。\u0026ldquo;增删改查算传\u0026quot;都通过\u0026quot;显示\u0026quot;与用户互动。用户对所使用的产品的一切感受，也都是通过\u0026quot;显\u0026quot;感受到的。处理异常的时候，要用同理心，去体会用户的感受。\n 可读/易用  消除歧义  例1：是否确定取消？ 确定/取消 例2：是否删除？（换行写删除的内容名称及影响范围） 删除/不删除   文案有温度  现在发生了什么，你需要怎么做，这样做的后果是什么，做了之后还能不能反悔修改。 根据用户和场景，决定文案的语气、字数多少、字号大小、按钮大小、是否语音播报、颜色等等。需要有代入感才能写出有温度的文案。   化繁为简  界面简单 文案简洁 操作简便：尽量减少点击次数，但敏感操作又会故意设计复杂操作。 精简流程：比较难，太精简了会导致耦合度高，太分散了会导致操作体验差，需要适当权衡取舍。     一致性  用一致性消除歧义：用词一致、icon一致、交互一致、色彩一致。  共识性一致：比如红色用于警告类，绿色用于引导操作。 产品内一致：同一模块，避免出现既有实心icon，又有线条icon，等等。   用一致性提高易用性：产品的所有弹窗中，确认按钮在左侧，取消按钮在右侧，等等。   消除焦虑——一切尽在掌控  空态页/dashboard合理利用  常规加载时，坚决消灭所有空白页，包括返回数据为空的异常情况。先显示骨架图 → 再模块化显示数据。   加载动效设计  loading和进度条，文件过大导致必须等待时使用。让用户有个心理预期，根据其使用场景，合理决策继续等待或者退出。     反馈系统——凡操作，必有反馈  正常反馈  页面有明显变化的，无需额外的反馈，页面变化本身就是一种反馈。 页面无明显变化的，用轻提示反馈。比如：操作成功、已添加。 没有反馈也是一种反馈。   异常反馈  操作失败、网络异常、获取数据失败、触发安全机制等，同时提供友好业务报错。 错误反馈文案由两部分组成：①用户能看懂的，②开发能定位到问题的。     用户安全——让用户掌握主动权  上限（消息服务）  针对重要变更信息，给予消息通知。另外短信通知、推送通知、注册/登录短信、邮件、都需要设置上限。 尽量避免系统bug导致短信轰炸用户的情况时有发生…   中止及撤回  短信、通知、邮件，分批推送，且后台能进行中止发送和撤回操作。   隐私数据  涉及身份证号码的页面，要做数据权限处理，通常设置为少数人才能批量看到身份证信息。防止被拍照或截屏。 在移动端，通常是用户通讯录、摄像头调用、MIC调用、定位等。 密码使用密码框。     按需求/权限显示  根据需求做哪些显示 显示的方式是怎么样的 不同用户的数据权限是否一样，若不一样，该如何表现。      \u0026ldquo;显示\u0026quot;设计细节:    页面内容的布局 每页多少条数据、数据的排序？ 是否有翻页、翻页样式如何？ 是否提供查看详情，如何查看？ 查看是弹窗还是当前页打开，还是新页面？ 如何从各个操作页面跳转回原页面的方法？ 跳转回来的页面如何显示？ 不同权限用户的数据展示是否有不同？展现规则是怎么样的？ \u0026hellip;  算（计算和算法） 包括计算和算法。算法：是指用系统的方法描述解决问题的策略机制。其能对一定规范的输入，在有限时间内获得所要求的输出。 根据算法的定义，产品角度通常涉及到：\n 规则  个性化推荐 风控 打标签 积分体系 会员体系 用户ID 订单编号 简单运算规则   算法  搜索查询 产品经理需要简单了解一下算法逻辑，能可视化的了解各种算法的运算逻辑。      \u0026ldquo;计算\u0026quot;设计细节:    计算规则 页面公式、特定指标的计算规则 数据背后的逻辑 \u0026hellip;  传（传输） 即数据传输。不同服务器之间的数据传递，考虑到用户体验的时候ajax异步更新的传递，还有一些api的数值传递。生活中比如5G的应用亮点是低时延和高带宽，速度快反而是其次。可见\u0026quot;传\u0026quot;的三个点：时延、带宽、速度。因此，从用户角度可分为以下两类:\n 传输安全，结合\u0026quot;显\u0026quot;字，可分为  用户可感知类：脱敏传输并脱敏显示、可执行文件加后缀等 用户不可感知类：加密传输、接口安全、服务器隔离（敏感服务器不直接面向用户）。   传输速度  压缩：比如微信发送图片，不勾选原图，图片就会被压缩传输。 预加载：比如阅读类App，用户看第一章，他就会预加载第二章。用户读起来就不会有等待加载的过程，不会打断爽感。 异步加载：  偏移动端：按模块加载并显示给用户，不要等整屏内容都加载完再呈现，避免让用户焦虑。 偏PC端：尽量避免整个页面刷新!减少服务器压力，和用户等待时长。        \u0026ldquo;传输\u0026quot;设计细节:    不同用户之间、不同操作之间传递哪些数据？哪些字段？ 需要提供哪些API的接口？整合其他第三方系统时，第三方提供的API是否能够满足我们现有需求？ 数据的流向规则 \u0026hellip;  以列表为例 假如数据做成了列表样式，则需考虑：\n 是否考虑到了分页？ 是否需要排序？  排序的话按什么条件进行？ 排序满足不了需要的话是否需要搜索框？查询框？   查看详细列表的打开方式是怎样的？  本页操作还是新窗口操作？   跳转之后需不需要跳回来？ 选择数据支持单选还是多选？单选的话用下拉还是radio？ \u0026hellip;  总结 每当我们在做产品设计的时候，都在心里默念着七个字，基本上设计出来的产品功能点就都覆盖到了，省去了产品讨论和产品研发过程中很多不必要的沟通、交流和冲突。\n总之，细节交代的越清楚，和程序猿的沟通成本就越小。\n","id":3,"section":"posts","summary":"前言 所有的产品设计，本质上都是对于一些数据、内容、结构层、信息做一些交互，这是产品的本质。 增（新增） 做新增功能时，从以下角度考虑： 上下限 / 建","tags":["产品设计","产品学习"],"title":"产品设计之增删改查显算传","uri":"https://aotingxu.github.io/2020/06/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%98%BE%E7%AE%97%E4%BC%A0/","year":"2020"},{"content":"前言 很多时候人们在表达和思考问题时，容易思维混乱，分不清主次重点，在表达及沟通能力上就显得有所欠缺，比如\n 思考的时候没有逻辑，大多数时候不知道从哪里下手。 讲话时没有条理，费很多口舌却很难把事说清楚。 处理问题时效率低，东捡西漏，忙得团团转效果却不佳。  想解决这些问题，可以采用结构化思维模型即金字塔原理。将碎片化的信息进行系统化的思考和处理，从而扩大思维的层次，更全面地思考，从而提高自己的逻辑能力，锻炼表达的语言能够具备组织性、框架性，想问题能够具备条理性。\n目标 想清楚，说明白，干到位。\n 思维决定结果 沟通决定效果  想清楚 16字真言：结论先行、上下对应、分类清楚、排序逻辑\n  结论先行:先说结论，养成这样的习惯；大家知道领导的时间都是很宝贵的，一定要第一时间说明观点\n  结论总-分点叙述原因分     上下对应:下面的论据一定是支持上面的观点的\n 自上而下的概括总结(列出要点-\u0026gt;找到关系-\u0026gt;得出结论) 自上而下的回答疑问    使人信服的论据包括： 1. 数字或者数据 2. 一般常识 3. 事例的积累 4. 已被决定的判断，比如领导已经决定的一些判断 5. 制度，公司内部规定     分类清楚：MECE（Mutually Exclusive Collectively Exhaustive；相互独立，完全穷尽）原则。不可能解决所有的问题，但分类清楚，就能找到重点。\n 分类方法包括：  二分法 过程法 要素法 公式法 矩阵法 其他  SWOT 分析 Porter\u0026rsquo;s Five Forces（波特五力） 4P 营销理论（产品 Product、价格 Price、渠道 Place、宣传 Promotion） PEST 宏观环境分析（P：政治 politics、E：经济 economy、S：社会 society、T：技术 technology）        排序逻辑：A,B,C和G是一个什么关系。\n A→B→C→G 演绎论证： 适用于创新的，需要说服听众的汇报。    三段论：大前提、小前提、结论 常见式：现象、原因、解决方案    A+B+C = G 归纳论证： 适用于常规性的汇报。    说明白 如果经常发现自己被淹没在大量需要分类和考虑的事实、数据、信息和想法中，却无法决定哪些是你希望与人交流的信息，那么首先需要面对的问题是，界定和分析问题，然后在将方案写出来与人交流。\n 万能的框架:PREP模型  结论先行 列举说明原因    总结 从大脑思考逻辑的角度看，人们思考的方式倾向于对获取的信息进行自动关联分类; 而对于没有逻辑关联的信息则很容易被大脑忽略。因此，采用结构化思维模型（金字塔结构）表达，加强逻辑关联，能让我们的交流和沟通更加高效。\n","id":4,"section":"posts","summary":"前言 很多时候人们在表达和思考问题时，容易思维混乱，分不清主次重点，在表达及沟通能力上就显得有所欠缺，比如 思考的时候没有逻辑，大多数时候不知道","tags":["能力提升","产品学习"],"title":"提高逻辑表达能力的高效方法——结构化思维","uri":"https://aotingxu.github.io/2020/06/%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4/","year":"2020"},{"content":"背景 互联网进入到下半场，消费互联网萎缩，产业互联网兴起，企业服务话题逐渐变火，目前越来越多的在C端有过1-2年产品经验的产品经理想要入行或者正在真正开始从事SaaS产品的工作过程中。由于C端产品相对B端容易理解，很多刚入门的产品经理包括我，经常会以C端思维来思考B端SaaS产品，导致做SaaS产品过程中时常会遇到某些瓶颈问题，后来发现自己的思维模式及方法就有些不对，应该转变全局概念。比如当我们思考自身SaaS产品如何满足一块新的业务时，往往会发现过程中与C端产品有以下不同。\n 通过分析SaaS产品经理的从业之道，围绕以下几个问题进行深度思考——如何成为一名有深度具备商业sense的PO。\n1 如何解决“理解业务难”的问题 做SaaS产品，往往面临的是一个环状业务，从宏观和微观角度，分析产品经理应该如何理解业务\n2 如何解决“需求不好梳理”的问题 做SaaS产品，往往面临的整个业务链条需要权衡，从场景和价值角度，分析如何更好梳理业务链条的业务场景及需求，并通过价值对需求进行评价\n3 如何解决“功能设计复杂”的问题 做SaaS产品，往往会面临大量个性化需求，以“后端标准化，前端个性化”的角度出发，理解并分析架构，同时思考如何进行可配置来解决做SaaS产品的终极问题。\n总结 针对以上问题，个人围绕课程体系框架进行了脑图的归纳总结：\n1 深刻理解SaaS业务  SaaS产品经理如何快速了解一个行业？ SaaS产品经理如何进行业务调研？  2 定义SaaS产品的场景与价值  7要素描述产品场景 如何通过场景需求清单梳理场景 价值主张与需求对应的价值 如何基于价值进行需求的判断  3 SaaS产品设计—架构与功能  商业活动和管理活动通用的架构 如何梳理复合业务的架构 如何基于架构设计功能，满足个性化的需求  如今我会经常复盘当时学习此课程后整理出来的脑图，在一定程度上确实帮助我厘清了系统化的思考框架，受益匪浅，希望自己多思考多总结能持续坚持下去！\n","id":5,"section":"posts","summary":"背景 互联网进入到下半场，消费互联网萎缩，产业互联网兴起，企业服务话题逐渐变火，目前越来越多的在C端有过1-2年产品经验的产品经理想要入行或者","tags":["产品管理"],"title":"SaaS产品经理从业之道","uri":"https://aotingxu.github.io/2020/05/saas%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%BB%8E%E4%B8%9A%E4%B9%8B%E9%81%93/","year":"2020"},{"content":"前言 由于想把平时个人的工作、学习、生活总结及记录内容进行复盘整理，形成个人的知识沉淀结果，决定利用github网站进行知识的归集。花了点时间学习了Hugo + Github Pages搭建个人博客的内容。\n可大体总结下流程吧，作为本博客的开篇hh\n搭建博客流程   注册github账号，创建一个用户名.github.io的仓库名，后续也是个人博客网站的地址。https://aotingxu.github.io/\n  鉴于可便捷快速操作，我下载了github的desktop版，如需汉化将GitHubDesktop项目根目录resource内的main.js和renderer.js替换成汉化文件即可 https://github.com/lkyero/GitHubDesktop_zh/releases 下载，记得备份。\n  选择GitHub Pages网页生成工具。看了网上一些教程， 搭建静态站点网站有用Jekyll （基于 Ruby）可参考 https://www.zhihu.com/question/20962496 或 https://www.jianshu.com/p/9f71e260925d 。鉴于之前在猪齿鱼写官网用户手册都是基于hugo+vscode写的，对hugo的操作比较熟悉，因此个人选择hugo。\n  可参考 https://juejin.im/post/5cc41bfef265da036505031c 安装hugo，Windows系统需要在path配置环境变量。\n  选择网站主题模板，因为个人想要首页具备快速索引及导航的功能，能够清晰看到文章结构目录，以大方简洁为主，便选择了此主题。https://themes.gohugo.io/hugo-theme-pure/\n  将主题项目克隆到本地，进行个性化编辑。\n  调整主题目录结构，在content/posts内编写博客内容，并且自定义配置config文件。\n  hugo server本地验证博客内容。\n  使用hugo命令在根目录下编译生成文件\n  将生成的文件push到github博客仓库内。\n  然后就可以通过域名访问啦~\n   一次快速且十分顺利的个人网站搭建经历！接下来就将快一年以来的本地OneNote陆陆续续总结的学习/工作内容慢慢搬到github.io上啦~\n","id":6,"section":"posts","summary":"前言 由于想把平时个人的工作、学习、生活总结及记录内容进行复盘整理，形成个人的知识沉淀结果，决定利用github网站进行知识的归集。花了点时间","tags":["教程总结"],"title":"个人博客搭建指南","uri":"https://aotingxu.github.io/2020/05/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/","year":"2020"},{"content":"数据分析是产品经理工作的重要组成部分，依据数据变化来调整产品是有效的工作方式，如何进行数据分析，分析哪些数据，怎么转化数据为行动。 学习了相关的视频教程后，总结出以下知识点。\n","id":7,"section":"posts","summary":"数据分析是产品经理工作的重要组成部分，依据数据变化来调整产品是有效的工作方式，如何进行数据分析，分析哪些数据，怎么转化数据为行动。 学习了相关","tags":["产品分析"],"title":"产品分析：如何进行数据分析及应用","uri":"https://aotingxu.github.io/2020/03/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8F%8A%E5%BA%94%E7%94%A8/","year":"2020"},{"content":"互联网产品发展日新月异，在各种形态的产品背后，梳理哪些思维方式在发挥作用，从一定高度来学习如何将抽象思维转化为产品实体，把握关键脉络和思维方式，顺应趋势打造产品。\n现对互联网思维框架进行全面总结。 ","id":8,"section":"posts","summary":"互联网产品发展日新月异，在各种形态的产品背后，梳理哪些思维方式在发挥作用，从一定高度来学习如何将抽象思维转化为产品实体，把握关键脉络和思维方","tags":["能力模型"],"title":"产品思维：互联网思维模式","uri":"https://aotingxu.github.io/2020/01/%E4%BA%A7%E5%93%81%E6%80%9D%E7%BB%B4%E4%BA%92%E8%81%94%E7%BD%91%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F/","year":"2020"},{"content":"低代码，本质是一种类似“乐高积木”的理念——将通用、可重复使用的代码形成组件化的模块，通过图形化的界面来拖拽组件拼成应用，从而在只写少量代码或不写代码的情况下，搭建软件应用。\n低代码必然是趋势，现在企业在新的发展趋势的推动下，业务的变化越来越快，传统的代码开发方式对业务需求的响应速度和高昂的成本对业务部门来说都是痛苦的选择。特别是面对业务变更产生的新的需求。一个企业另外建立一个庞大的IT团队来维护业务系统的发展需要付出庞大的成本。在这种背景下，会有更多的企业选择低代码开发平台来灵活快速地相应业务部门的需求。他们不需要太多的考虑系统低层的架构、性能、用户管理、域用户的集成，系统安全规范等低层技术问题。只要选择了满足要求的低代码平台，专注于业务需求的实现。不但对开发技术人员的技术需求降到，还提示对业务部门需求的及时响应和支撑，为企业业务变更创新创造IT的价值。所以越来越多的企业会在低代码平台上尝到甜头，也会更持续的支持低代码平台的发展。关键还是要有一个能支持企业各种需求功能的好平台，而不是简单的表单+流程。\n国外的低代码开发平台发展更为成熟，包括OutSystems、Mendix、Google的AppMaker、微软的PowerApps、Thunkable、AppSheet等。其中OutSystems于2018年6月获私募股权投资机构KKR和高盛3.6亿美元融资，估值超过10亿美元成为独角兽。\n低代码也作为一种高效的开发工具而被人熟知。凭借敏捷的开发特点， 低代码首先不仅能帮助企业加速开发的快速上线，试错和迭代，满足企业的快速创新需求；其次，低代码平台可减少企业传统烟囱式应用架构，实现统一平台的构建与集成互通；第三，因为不同传统开发的代码量巨大，低代码平台开发应用所使用的代码少，BUG少，系统更稳定，可维护性更高。 模型驱动 模型驱动应用设计是一种方法，重点是向应用添加仪表板、窗体、视图和图表。 不使用代码或使用极少代码，即可生成简单或非常复杂的应用。 在画布应用中，设计器可以完全控制应用布局。 另一方面，在模型驱动应用中，大部分布局取决于所添加的组件。 重点在于快速查看业务数据并做出决策，而不在于复杂的应用设计。\n 下面是模型驱动的应用的一些优势：   创建以组件为中心的丰富环境 无需使用代码（或使用极少代码） 创建在各种设备上效果极佳的复杂的响应式应用，同时在一个环境中对这些应用进行开发 设计功能类似于 Microsoft Dynamics 365 客户连接平台中提供的功能 应用可以作为解决方案进行分发   生成模型驱动应用的方法 模型驱动应用有三个设计阶段：   对业务数据进行建模 定义业务流程 生成应用  ","id":9,"section":"posts","summary":"低代码，本质是一种类似“乐高积木”的理念——将通用、可重复使用的代码形成组件化的模块，通过图形化的界面来拖拽组件拼成应用，从而在只写少量代码","tags":["领域知识"],"title":"Lowcode行业发展方向","uri":"https://aotingxu.github.io/2019/12/lowcode%E8%A1%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E6%96%B9%E5%90%91/","year":"2019"},{"content":"敏捷的特点  按一定周期进行迭代发布，通常是2-4周一个迭代。用最短的时间交付有用的价值。 跨职能、多角色组成的团队，通常是5-10人组成。角色有：sm（销售人员）、po（产品或业务负责人）、team（开发、测试、UI）  原则  scrum • 会议：计划会、站会、评审会 • 流程：backlog、 增量开发、迭代发布、交付 看板原则 • 可视化 • 流动 •在制品限制  由PO给开发团队描述这些用户故事。过程中根据PO的功能描述，团队成员提出自己的疑问，在相互的反馈沟通中达成共识。最后给每个用户故事指派一个主要负责人，并对这个故事进行估算，将前后端的工作量进行统计，得出一个故事点。这个故事就结束了，进入下一个故事的讨论 （故事点：它们用来度量规模和复杂度，表达‘用完成任务所需时间来表示难度。故事点数是需要实现一个故事所付出时间的相对度量）\npo职责  迭代前：迭代计划会上，讲述用户故事、决定故事优先级（是否删除部分） 迭代中： 针对优先级事项，研发人员遇到不懂的与其及时沟通； 每日站会上，遇到抛出的问题，会后与开发人员一同做讨论决定； PO将下个迭代需要进行的需求进行拆分，以用户故事的方式进行描述，创建在backlog中。PO与UI会就这些故事开始讨论，PO描述故事所要达成的功能（出简单原型图），从而再让UI出高保真原型图。在UI出图后，与UI进行沟通调整，将反馈的修改意见进行优化调整，将原型图与相关的故事关联。 功能确认后，测试人员或者PO需要开始编写这个迭代各个功能点的测试用例。当在活跃冲刺看板中卡片流动到了“验证测试“时，PO和UI可以针对故事进行多方面测试，有功能的、样式的。一旦发现问题，若与开发人员确定是bug，则将相关的子任务打回给开发人员，然后创建缺陷，随即关联该故事或子任务。 （比如这个迭代的功能均属于1.0版本发布的，PO可以在猪齿鱼测试管理找到0.9版本的用例，将其克隆一份到1.0版本，再针对新增的功能在1.0下创建新的用例，对于变更的功能找到之前的用例，在此基础上进行修改。最后，继续测试计划，指派测试人员。） 迭代后期: 第一个迭代po做增量测试 ——》 所有成员进行针对测试用例进行全量测试、bug修复 Ps:开发人员也参与测试，是交叉测试-回归测试。猪齿鱼测试管理，支持在每个用例的步骤创建bug，并可以直接关联到当前冲刺。 （回归测试是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。）  敏捷开发模式中的四种会议： 计划会，每日站会，回顾会，评审会\n","id":10,"section":"posts","summary":"敏捷的特点 按一定周期进行迭代发布，通常是2-4周一个迭代。用最短的时间交付有用的价值。 跨职能、多角色组成的团队，通常是5-10人组成。角色有","tags":["产品管理"],"title":"敏捷项目产品经理管理方案","uri":"https://aotingxu.github.io/2019/12/%E6%95%8F%E6%8D%B7%E9%A1%B9%E7%9B%AE%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%AE%A1%E7%90%86%E6%96%B9%E6%A1%88/","year":"2019"},{"content":" 初级的产品经理是推进层，推进产品迭代； 中级的产品经理是业务层，规划产品的业务发展方向； 高级的产品经理是战略层的，对整个公司的发展方向决策，而不是产品的发展方向。**  首先是初级： 初级的产品经理需要的能力都是比较显性的，最重要的是能够根据公司的战略，业务目标来独立推进一个产品的迭代。\n 产品设计能力，至少要懂交互设计，视觉层面上，从产品的设计上提高产品的用户体验； 逻辑思维能要强，好的逻辑思维，才能在产品设计上更加流畅，才能更好的表达自己的需求； 技术上要懂逻辑层，不要求代码层，懂技术实现的逻辑，才能在产品规划，产品设计上有更好的效率 可以独立负责一个小型产品，或者大型产品中的一个完整功能模块。不只是被动的接需求，这里的主动性，要求产品经理开始具有用户研究的能力，需求管理的能力。   初级的产品经理是可以通过学习，工作来提高这些显性的能力。  其次是中级的： 中级的产品经理最关键的技能是需要有规划能力，能够独立负责一条产品线，此时规划能力的背后，要求产品经理需要对产品除了功能外的知识也有掌握，比如市场运营层面。\n 需要非常的了解整个市场的发展，能够判断未来的发展方向； 此时产品经理已经脱离了产品设计层面，更重要的是把控整个产品的发展方向，整个业务的发展方向； 知识层面要广，也就是蘑菇型人才，底子很厚重，但涉猎层面很广。可以根据相关行业的发展，政府的政策等，举一反三，规避风险； 管理能力，中级的产品经理都是带人的，需要能够带起整个部门，能合理用人，合理分工，对部分的人员成长负责，也就是需要会带人  最后是高级的 高级的产品经理关键差异在于有跨职能部门的管理经验，也就意味着到了这一层级，出去就可以做小公司的CEO，或者大公司的事业部负责人，或者直接创业。这个层级的产品经理，影响力已经不局限于产品团队，对运营策略、公司高层的方向都有着很强的话语权\n 影响力，人格魅力：注重个人的品德修养，一言一行，一举一动都要从大局、整体的利益出发，不能以个人的小算盘和私心去考虑或处理问题，处处要以身作则、严于律己，起到表率作用。 创造力：要有较强的创造力，要勇于引进新的产品，能为公司的运作效率、流程再造、管理创新、市场拓展、品牌经营和企业的规范化、制度化、现代化管理出谋划策，特别是要注重观察外部形势的发展变化，并不断根据企业的实际情况进行调整创新，以适应市场竞争的需要，跟上时代前进的步伐。 危机管理能力：只有临危不惧和临危不乱才能作出正确的决策，妥善处理危机事件。突发事件本身信息不完全，又关系重大，需要紧急处理，因此，处理突发事件的非程序化决策具有很大的风险性，决策措施对化解危机的作用有时难以衡量和预测。这种处理结果的风险性要求领导者在做出决策时抛开个人得失，敢于承担责任，在危机处理中具有高超的领导艺术，要有敢冒风险，敢当风险的精神和能力。  ","id":11,"section":"posts","summary":"初级的产品经理是推进层，推进产品迭代； 中级的产品经理是业务层，规划产品的业务发展方向； 高级的产品经理是战略层的，对整个公司的发展方向决策，而","tags":["能力模型"],"title":"B端产品经理未来职业发展方向","uri":"https://aotingxu.github.io/2019/12/b%E7%AB%AF%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%9C%AA%E6%9D%A5%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E6%96%B9%E5%90%91/","year":"2019"},{"content":"前言 前段时间阅读了《六顶思考帽》书籍同时参与了lowcode产品功能蓝图规划工作，在lowcode头脑风暴过程中，就是采用平行思维方式对整个lowcode功能进行思考，从模型、展现、事件、权限四条线水平思考，在对应的水平线上，构建各个线上零散的点，采用底层逻辑（定义）逐渐往上封装形成上层逻辑的思考方式进行串联各点，再考虑各点之间的关系、作用范围、操作、生命周期；接着再上升高度，由单点扩散到多点集合；最后得出点的最终表现形式——存储/展现渲染；再接着通过设计器进行线与线之间构成面来进行交叉耦合的思考，最后以点线面体的形式整合实现整体功能。个人对平行思考思维模型受益匪浅，因此总结了相关的内容予以记录和分享。\n 背景 思考最大的问题在于混乱。我们总是试图以此解决太多问题。情感、信息、逻辑、希望和创意全都在头脑中挤做一团，就好像用球变戏法，结果却因为球太多而手忙脚乱。在产品设计过程中设计思维也较为受限。\n现围绕PPT内容展开相关描述。 1 平行思维与垂直思维 垂直思维指沿着既定的路径一直走下去，平行思维从不同角度认知同一个问题。那么具体来讲，平行思维与垂直思维的区别有以下几个方面? 当人们使用平行思维时，便能够跳出原有的认知模式和心理框架，打破思维定势，通过转换思维角度和方向来重新构建新概念和新认知。它强调“能够成为什么”，而非“本身是什么”,寻求一条向前发展的路，而非争论对错。\n在平行思考中，在每个时间点，每个思考着看问题的角度是一样的，其想法被平行地罗列出来，你无须对上一个人所说的话做出回应，而只需添加另一个与之平行的想法即可。通常，如果两个人的观点不一致，就一定要辩出个是非对错。在平行思考中，两种观点会并并排罗列出来。将来有必要二选一时才会做出选择。因此，并不是每一步都有辩论。\n2 六顶思考帽代表含义 六顶思考帽是英国学者爱德华·德·博诺（Edward de Bono）博士开发的一种思维训练模式，或者说是一个全面思考问题的模型。它提供了“平行思维”的工具，避免将时间浪费在互相争执上。强调的是“能够成为什么”，而非 “本身是什么”，是寻求一条向前发展的路，而不是争论谁对谁错。运用德博诺的六顶思考帽，将会使混乱的思考变得更清晰，使团体中无意义的争论变成集思广益的创造，使每个人变得富有创造性。所谓六顶思考帽，是指使用六种不同颜色的帽子代表六种不同的思维模式。 其中，蓝色思考帽负责控制和调节思维过程。它负责控制各种思考帽的使用顺序，它规划和管理整个思考过程，并负责做出结论。白色思考帽与客观事实和数据有关。黄色思考帽代表着乐观，包括希望和积极的思考。红色思考帽直指我们的感觉、直觉和预感。黑色思考帽意味着警示与批判。绿色思考帽代表创造力。\n那么六顶思考帽和水平思维是怎么结合的呢？ 正确做法是在某一个指定的时间段，每一个在场的人都戴上黑帽，在另一时间段都戴上白帽。这才是平行思考，才能够最大限度地充分利用每个人的智慧和经验。\n3 六顶思考帽使用方法 对六顶思考帽子的最大误区是仅仅把思维分成六个不同颜色，但其应用关键在于使用者用何种方式去排列帽子的顺序，也就是组织思考的流程。只有掌握了如何组织思考的流程，才能说是真正掌握了六顶思考帽的应用方法，不然往往会让人感觉这个工具并不实用。\n六顶思考帽使用步骤 首先通用的应用步骤可以有如下闭环结构： 其次根据定义具体考虑到实践应用过程中具体该考虑的因素，可有对应的以下几点： 六顶思考帽与产品设计关系 另外当它结合产品规划设计过程时，可构建如下关系: 其中， 红色：指产品规划过程中用户情感化因素的考虑。进行用户研究时切忌加入自己的主观情绪。着重于产品的情感化设计。\n蓝色：主要指产品规划过程中的业务逻辑梳理，信息系统架构，产品功能设计。\n黄色/黑色：产品前期发展战略的制定。 根据SWOT分析法，可以拆分成四种战略模式：S （strengths）是优势、W （weaknesses）是劣势，O （opportunities）是机会、T （threats）是威胁。 优势-机会（so，增长性战略） 弱点-机会（wo，扭转性战略） 优势-威胁（st，多种经营战略）——是多种经营战略的明智选择 弱点-威胁（wt，防御性战略）\n绿色：也就是创造力，产品的功能创新，产品创新点挖掘。产品的创新点并不一定是产品信息架构，产品功能或者产品交互上的创新。细分市场，也是一种“创新”。\n白色：客观的数据分析，市场调研，主要由以下两部分组成：\n 1从广阔的视角先去查看行业数据，了解该产品所在的行业市场占有率。 2分析同类产品的总的数据情况 3在进行数据分析的过程中，要把握一个重点，不要为了追求全面而去收集过多的数据，而要在几个维度下，选择最具说服力的数据。在用户维度，重点在于用户画像的建立；在产品维度，重点在于下载量，DAU，WAU上。在市场维度，重点在于产品流量指标，产品各渠道转化率等。  六顶思考帽使用顺序  如果，举行会议，且会议目的单一，比如收集看法、讨论做某件事物的价值等等，那么只需要某一顶帽子就能够解决问题了。根据会议过程选择特定帽子，并且视情况而切换顺序。  但一般来说，大部分的会议都不是只用单一帽子就能够达到目的的，那么我们就要尝试组合使用帽子的方式来进行会议的讨论和决策。 不过，要注意的是，六顶思考帽方法可能需要一定的训练与磨合才能发挥出它的真正效果。同时再同一时间段，不能使用两顶帽子。  六顶思考帽在创意提出过程中的应用 再比如会议上想要提出一个创意点子，一般可伴随如下流程，并且需要注意各顶帽子在使用过程中的注意点：\n 白帽思考希望人们明确提供中立客观的信息；——评估创意能否奏效，或者即使不能奏效，是否有任何价值时，都可以随时启用白帽思考来提供所需的资料。 黑帽思考希望人们提出某些具体的批判意见； 黄帽思考希望收获乐观的评价，但并非每次都能成功；——对创意进行建设性的开发，还包括积极评估并寻找有证据支持的收益和价值点。 红帽思考希望得到所涉及情感的报告，即使这些情感是中立的；——积极乐观的情感，对创意进行情感评估，前提是基于黑帽思考结果和黄帽审查的基础上。 绿帽思考不要求任何投入，只要求付诸努力，要求人们腾出一段时间来生成新创意，即使想不出什么新东西，但重要的愿意花时间做出这一努力。——需要实际提出新创意、新办法和更多的备选方案  总之，在事件应用“六顶思考帽”的思维训练模式过程汇总，可完成对产品规划过程的梳理，使混乱的思考变得更清晰，可以理清思考的不同方面，而不是一次解决所有问题，同时也可以让思考者集中考虑风险因素，其次是利益，然后是感受等等。\n4 六顶思考帽作用价值 具体来讲，它避免思考者将时间浪费在互相争执上,提高会议执行力与效率；使团体中无意义的争论变成集思广益的创造，使每个人变得富有创造性；它是管理思维的工具，沟通的操作框架；它给人以热情，勇气和创造力，让会议、讨论、决策充满新意和生命力；它诠释了创新的关键在于思考，从多角度去思考问题，绕着圈去观察事物才能发现新角度，产生新想法，发现新机会。 总结 思考最大的敌人是复杂性，复杂会导致混乱。在实践中，该方法使最后的决定显得水到渠成。当自己在做决策时，都会经历利益、弊端、情感、事实的思考过程。通过让思考者每次只处理一件事，来简化思考过程。期间不需要同时应对情感、逻辑、信息、希望和创造力，而是逐一应对上述种种。对情绪的表达也无需遮遮掩掩，可以直接坦率而无需为其正名，继而由黑帽思考来负责逻辑任务。这样的思维方式简单高效，变成了一种指令的速记符合。我们可以根据指令进行切换使用，对某些特定类型的问题进行思考。\n需要注意的是在思考过程结束后，如果不可能做出决策，则最终的蓝帽应该列出无法做出决策的原因。可能需要就某个问题收集更多信息，也可能是不同的价值观无法调和。但如果最终的蓝帽能够确定一个新的思考焦点，那么这个新的思考焦点就会成为下一次思考会议的任务。\n总之，并不是说思考的每时每刻都应该有意识地使用某一顶思考帽，偶尔也会希望以一种正式架构的顺序经历一下更换思考帽的程序，此时，就需要事先列出架构。另外，显然，只有组织中人人都懂游戏规则，这一框架才是最有用的。只有当它成为一种共同语言，才能有效指导思考。\n最后附上个人对《六顶思考帽》知识体系整理的脑图，列举了书籍里的关键词和理论，以供之后复盘回顾学习。 ","id":12,"section":"posts","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e前段时间阅读了《六顶思考帽》书籍同时参与了lowcode产品功能蓝图规划工作，在lowcode头脑风暴过程中，就是采用平行思维方式对整个lowcode功能进行思考，从模型、展现、事件、权限四条线水平思考，在对应的水平线上，构建各个线上零散的点，采用底层逻辑（定义）逐渐往上封装形成上层逻辑的思考方式进行串联各点，再考虑各点之间的关系、作用范围、操作、生命周期；接着再上升高度，由单点扩散到多点集合；最后得出点的最终表现形式——存储/展现渲染；再接着通过设计器进行线与线之间构成面来进行交叉耦合的思考，最后以点线面体的形式整合实现整体功能。个人对平行思考思维模型受益匪浅，因此总结了相关的内容予以记录和分享。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e思考最大的问题在于混乱。我们总是试图以此解决太多问题。情感、信息、逻辑、希望和创意全都在头脑中挤做一团，就好像用球变戏法，结果却因为球太多而手忙脚乱。在产品设计过程中设计思维也较为受限。\u003c/p\u003e\n\u003cp\u003e现围绕PPT内容展开相关描述。\n\u003cimg src=\"http://47.101.145.99/wp-content/uploads/2019/12/11.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch2 id=\"1-平行思维与垂直思维\"\u003e1 平行思维与垂直思维\u003c/h2\u003e\n\u003cp\u003e垂直思维指沿着既定的路径一直走下去，平行思维从不同角度认知同一个问题。那么具体来讲，平行思维与垂直思维的区别有以下几个方面?\n\u003cimg src=\"http://47.101.145.99/wp-content/uploads/2019/12/22.png\" alt=\"\"\u003e\u003c/p\u003e","tags":["能力提升"],"title":"《六顶思考帽》知识体系与应用方法总结","uri":"https://aotingxu.github.io/2019/12/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E4%B8%8E%E5%BA%94%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/","year":"2019"},{"content":"大规模敏捷 敏捷管理支持较单一或者较简单的敏捷团队进行项目管理。\n在0.16版本，猪齿鱼推出了大规模敏捷管理。大规模敏捷管理主要针对系统较大，团队较多，业务复杂的项目。\n在猪齿鱼大规模敏捷管理中，将多个敏捷团队组建成一个项目群，由项目群的所有者统一管理并规划，使各个团队按照相同的节奏交付价值。\n项目群角色：RTE、PM、敏捷教练 • RTE：发布火车工程师是敏捷发布火车的 Scrum 主管，一列敏捷火车是由多个团队组成的。RTE 负责敏捷火车的总体执行，包括在执行过程中消除阻止火车前进的障碍，以及管理各个团队之间的集成。 • PM：产品经理管理整个项目群的需求。在猪齿鱼大规模敏捷中将需求统一视为特性，并放在每个PI（项目群增量）计划活动中，特性分为两种类型业务特性和使能特性。 • Scrum Master：Scrum 主管是团队级别上 Scrum 的负责人，确保 Scrum 的正确使用并使得 Scrum 的收益最大化。\n项目群要点：特性、ART、PI、IP 特性 • 特性指的是在固定的周期内，一列进行中的ART，每个PI可以交付的货物。 • 特性来自各种各样的利益相关者，包括客户、业务负责人、产品管理者等，也可能是由项目群史诗或者能力拆分出来的。所以，史诗在大规模敏捷中，应该是多个特性的集合，一个史诗中包含了多个特性。 • 在猪齿鱼大规模敏捷中描述了功能性的系统行为的一个层次结构：史诗\u0026gt;特性\u0026gt;故事。\nART • 大规模敏捷中有一个关键的名称-敏捷发布火车（ART），它是一个长期存在、自组织的敏捷团队，这些团队一起定义新特性、计划、给出承诺、执行工作并交付价值。敏捷发布火车工程师可以通过设置ART，制定整个项目群的开发节奏、迭代周期。 • ART设置：火车名称，火车发布时间 • ART节奏：迭代数，迭代时长，IP时长 • PI规则：PI前缀，PI编号\nPI（项目群增量） • Program Increment，用来计划和确定一列敏捷发布火车的时间维度，通过定量的时间递增（Sprint）来保证开发实现和我们计划任务保持一致。 • PI 将在固定的时间区间内计划出一个可量化、可实现和最终可测量验收的计划路线图。 • PI目标是项目群在这个PI中打算承诺的内容，以业务术语来表述并进行可预测性的度量，这种度量方法用于跟踪计划中每个PI目标所达成的业务价值的百分比。\nIP 创新和计划（Innovation and Planning），我们会对整个新功能进行系统级别的验证和回归测试，估算下一次增量计划的缓冲时间，总结我们在实施项目过程中哪些是做的好的地方，可以继续；哪些地方需要改进，总结经验和教训。最后，我们可以对下一次的增量发布进行提前计划。在这个过程中可能建立使能特性（为项目知识和能力做好提前准备） ","id":13,"section":"posts","summary":"大规模敏捷 敏捷管理支持较单一或者较简单的敏捷团队进行项目管理。 在0.16版本，猪齿鱼推出了大规模敏捷管理。大规模敏捷管理主要针对系统较大，团","tags":["产品管理"],"title":"大规模敏捷SAFe知识框架总结","uri":"https://aotingxu.github.io/2019/08/%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/","year":"2019"},{"content":"  具体对禅道、TAPD、Jira、华为软件云、ONES Project 平台进行分析整个逻辑操作流程、功能结构、页面布局等，并与猪齿鱼现有的内容进行整理对比。  整理输出这周的产品分析报告，接下来会继续研究竞品，在此基础上不断完善、扩充。  针对竞品相关的比较好的交互设计、功能点对猪齿鱼项目提出可优化的方向。\n  学习产品分析、竞品分析方法，总结产品分析结构图。如下图所示。  看了网易极客班微专业的TO B产品经理部分课程，对敏捷产品管理的部分进行了学习，主要了解学习了产痛企业痛点与敏捷带来的好处、Scrum框架、敏捷管理、产品管理、协作、需求工作坊、产品待办事项、故事点估算、发布计划，同时对由Ken Schwaber 和 Jeff Sutherland 开发并维护的Scrum-Guide官方指南进行了仔细阅读，从而更好的对之前看过的相关敏捷书籍和视频课程进行权威理论化的对应思考。\n  去YouTube上看了国外应用mendix和JIRA的应用情况及流程。\n  ps:另外以下总结的相关内容日报里有写过的就不再赘述，具体对应的详细点的内容可查看对应的日报内查看。\n竞品功能对比分析 通过对禅道、TAPD、Jira、华为软件云、ONES Project、猪齿鱼 平台的了解，选择了一些功能等特点进行了Y/N对比分析。在文末对猪齿鱼现有的一些内容提出了优化点。              对比项 禅道 华为软件开发云 ONES Project TAPD JIRA 猪齿鱼   支持Scrum流程 × √ √ √ √ √   支持思维导图式项目规划 × √ × √ × ×   epic/feature/story层级管理 × √ × × √ √   燃尽图 × √ √ × √ √   技术支持 线上 线上+线下 线上 线上 线上+线下 线上   项目、迭代管理 √ √ √ √ √ √   需求、任务、bug管理 √ √ √ √ √ √   邮件提醒 √ √ √ √ √ √   进度可视化 √ √ √ √ √ √   图表/报表 √ √ √ √ √ √   模块自定义 √ √ √ √ √ √   权限控制 √ √ √ √ √ √   文档管理 √ √ √ √ √ √   Wiki词条 × √ √ × √ √   自定义模块 √ √ √ √ √ √   自定义需求模块 × √ √ √ √ √   讨论区/备注 √ √ √ × √ √   关联代码提交 × √ √ × √ √   批量导入/导出 √ √ √ × × ×   支持看板任务拖拽 × √ × √ √ √   工时统计 √ √ √ √ √ √   任务标签 √ √ √ √ √ √   任务优先级 √ √ √ √ √ √   自定义过滤 √ √ √ √ √ √   APP客户端 √ √ √ √ √ ×   插件扩展 √ × × × √ ×   测试用例管理 √ √ √ √ √ √   移动app测试 × √ × √ √ ×   安全性 较好 极好 一般 一般 较好 一般   是否需要维护 × × × × × √   feedback × √ √ × √ √   Conversation × √ × × × ×   Dashboard √ √ √ √ √ √   Follow（关注）\u0026amp; Archive（归档） × √ √（wiki） × √ ×   交互体验 一般 较好 较好 较好 较好 较好   界面风格 禅道蓝 半透明 黑白 蓝色 简约蓝 商务蓝    JIRA JIRA是集项目计划、任务分配、需求管理、错误跟踪于一体的商业软件。JIRA创建的问题类型包括New Feature、Bug、Task和Improvement四种，还可以自己定义，所以它也一是过程管理系统。Jira融合了项目管理、任务管理和缺陷管理，许多著名的开源项目都采用了JIRA。 JIRA 是目前比较流行的基于Java架构的管理系统，由于Atlassian公司对很多开源项目实行免费提供缺陷跟踪服务，因此在开源领域，其认知度比其他的产品要高得多，而且易用性也好一些。主要有问题追踪和管理（问题类型包括New Feature-新功能、Bug-缺陷、Task-任务、 Improvement-改进 四种）、问题跟进情况的分析报告、项目类别管理功能、组件/模块负责人功能、项目email地址功能、无限制的工作流、子任务功能、邮件通知功能、CVS、SVN以及LDAP的集成功能。Atlassian产品搭建的敏捷管理体系JIRA：用来做项目管理、流程控制、缺陷跟踪、版本管理等JIRA Agile：JIRA的插件，主要用来做Scrum敏捷管理Confluence：团队协作工具，文档管理，任务管理，资源管理Fisheye + Crucible：用于做代码评审Bamboo：用于构建持续交付的测试环境HipChat : 用于团队沟通，主要看中可以整合JIRA和Confluence等的实时提醒产品特色：  Jira 的看板配置与状况一目了然，系统配合Scrum 模式，使团队能专注地完成任务。此外，有十余种视觉化报表，让报表与分析更迅速且直接。 除了云端平台，Jira 也推出了App，使用户能一手掌握工作进度，在指尖便可管理专案、编辑进度与即时答覆工作状态。   Jira 能与市面上大量的服务进行串接，兼容性极强，团队在工具应用上非常灵活。 跟踪任何事务。跟踪问题、任务、需求，缺陷。 软件全生命周期管理。   敏捷计划开发。JIRA Agile可进行迭代开发和帮助Kanban团队进行活动流管理。 配置你自己的工作流。 链接到源代码。在向代码库提交代码时填上JIRA中的问题关键字，可以使JIRA问题与代码关联起来，实现对代码变更的跟踪和管理。 链接到其它系统。通过远程链接功能，可以将JIRA问题与任何外部系统连接起来。 高级搜索和报告。JIRA提供了强大的自定义查询语言JQL，帮助你通过用户界面构建复杂的项目报告。JQL对于查找难以归类的问题、生成特定报表、构建面板、墙板也特别有用。 缺陷事务跟踪  快速跟踪软件缺陷。JIRA的网站页面使测试人员能够快速报告、管理、跟踪缺陷。使用键盘快捷键可以很容易地导航和修改问题；还可以从IDE直接访问JIRA问题或者通过其它各种桌面客户端、手机客户端、浏览器插件等访问JIRA。 可以配置个人面板，显示分配给我的问题、查看最近活动或相关问题状态。 Web应用程序测试。 如果正在浏览器中测试Web应用程序，无需切换到JIRA，通过Atlassian Bonfire就可以快速截图并提交缺陷。 收集用户反馈。使用JIRA的问题收集器从其它产品收集用户建议、问题征集等反馈。用户无需登录。只需在其它Web应用程序或者网站、博客中添加一个按钮，通过点击这个按钮即可填写反馈信息，填好后这些信息会即时的传输到JIRA中。 收集手机反馈。在你的移动应用中增加JIRA Mobile Connect，从你的移动用户中收集反馈意见。当移动应用崩溃时，能够自动发送完整报告给JIRA，用于分析和报告。 预置项目报表。直观的获取项目信息、访问历史版本变更信息和未来版本路线图、运行特定的查询或分享自定义面板给团队。 从其它系统迁移到JIRA。比如可将Pivotal Tracker等数据和项目导入到JIRA中。   项目跟踪：  自定义工作流。 敏捷项目计划。通过JIRA+JIRA Agile，能够管理待办事项和冲刺阶段，应用精益开发准则，可以可视化开发过程并获得持续改进。 Wiki项目。将JIRA项目与Confluence空间连接起来，可在Confluence空间中就产品规范和需求进行协作。不必离开Confluence就能够创建JIRA问题。在JIRA面板上可以搜索文档和嵌入Confluence文档页面内容。 项目报告与面板。时间追踪、用户工作量和问题统计。 保持联系。在你的RSS阅读器或面板中添加信息源就可以浏览任何项目、问题或用户的活动流。活动流显示了你的代码、构建活动、以及来自第三方应用(例如帮助台或测试用例管理工具)的相关更新，所有这些都在一个单独的活动流中显示。 JIRA扩展。通过大量的项目管理插件和集成扩展JIRA，使之适用于：需求管理、时间追踪、资源管理、微软Project。另外在Altassian MarketPlace (https://marketplace.atlassian.com)可以找到更多。   源代码集成：  代码托管在云端。可以将代码托管在BitBucket（https://bitbucket.org）的Git/Hg库中，然后与JIRA集成集成起来。BitBucket提供了轻量级但健壮的代码托管方案，还提供了先进的项目管理特性，如拉请求、智能提交等。 构建通知与发布管理。将持续集成服务器(如 Bamboo 或 Jenkins) 与JIRA集成，从而将问题与构建关联起来。Bamboo（http://www.unlimax.com/bamboo/）使你可以在JIRA面板和问题查看界面随时了解最新的构建状态。通过Bamboo设置一键式发布管理来简化部署过程。 促进代码评审。将Crucible（http://www.unlimax.com/crucible/）代码评审添加到JIRA工作流中，确保每行代码在将其发布前经过专家的仔细检查。用户可直接从JIRA的问题页面启动代码评审，如在评审中发现不足可以快速创建相应的子任务。在JIRA面板、项目浏览界面和问题查看界面可是随时获取评审状态。 将问题链接到代码行。在你的源代码库与JIRA之间建立集成，将JIRA中缺陷或开发任务与代码连接起来。使用FishEye来加强与配置管理工具的集成(如Subversion、Git、Mercurial、Perforce和CVS)，获得详细的代码提交图表和统计信息、了解最近的代码变动以及浏览源代码。   报表与分析  JIRA系统有内置的过滤器，用户可自行访问所需要的重要的问题。 保持更新。订阅别人分享的过滤器，按照定义好的邮件通知规则，可以定期收到电子邮件通知。 JIRA查询语言(JQL)。通过JIRA 查询语言(JQL) (便捷的查询自动生成器)，能够快速定义搜索条件。使用快捷键，可快速处理搜索结果和解决问题。 快速生成项目报告。可对时间消耗、用户工作量和问题信息进行统计。 创建与分享面板。使用Atlassian内置的OpenSocial小工具创建个人和团队面板。使用JIRA墙板，将面板变成信息发布器，让整个团队成员都能看到。   定制工作流：  定制适合项目的工作流，同时图像化工作流，从而进行更好的控制。同时可设置自动化工作流动作来执行一些通用的或自定义的任务，比如更新字段值、触发事件等。   扩展运用。  400多种插件可供选择。比如：  balsamiq(内置到JIRA中的一个原型图编辑器工具) Zephyr(实时测试管理平台，让整个测试生命周期从管理、追踪到共享JIRA问题变得很容易) TEMPO（轻松管理任何方式进行的时间追踪） JIRA Cilent(为JIRA用户提供桌面应用客户端，支持离线工作和问题分类)      **JIRA一套完整实践应用工作流：**1.准备工作 JIRA中创建Project，每个Project管理一个产品 修改流程，增加Code Review步骤 Confluence中创建对应的Team Space SVN中创建项目版本库，并在Fisheye中配置该库 Bamboo所在机器上安装Maven、Java、Tomcat、Nodejs等需要的产品运行环境，并将Maven的仓库路径配置到我们的Nexus服务器所在位置 为JIRA、Confluence等根据需要配置邮件提醒  **2.产品设计（Confluence）** 产品经理在Confluence中完成所有产品设计，编写产品需求文档，每个产品需求文档为一个Epic、多个Story（新版Confluence支持在Confluence中直接创建JIRA的Issue，非常便捷） 为达到快速迭代的预期，每个Epic的开发测试的周期尽量控制在1个月，其中具体执行分2-4个Sprint完成开发。 附上产品设计原型  **3.会议纪要（Confluence）** 产品设计完成后，需要经过多次迭代修改，最终定稿，所有会议内容需要记录和转换任务 每次会议前创建会议页面，并指定参加者和编写会议讨论内容，只要配置过confluence的邮件提醒，会给参与者发送邮件提示。 会议过程中实时记录会议讨论结果或转化的后续任务，并设定任务的执行人和截止时间，用于跟踪任务情况  **4.开发预估（JIRA + JIRA Agile）** 完成产品设计后，产品经理在JIRA Agile中对Epic中包含的Story先做Story Point评估，有需要再分割的任务创建Sub-Task并分配具体执行人。 同步进行UI设计和实体设计  **5.冲刺制定（JIRA + JIRA Agile）** 完成开发预估之后，开始执行阶段冲刺（我们采用1-2周一个冲刺），根据评估进行分配。 每次冲刺结束后，需要创建冲刺回顾文档，分析本次冲刺中好的部分和做得不够的部分，以指导下一次冲刺指定的标准  **6.持续交付（Fisheye + Crucible + Bamboo）** 冲刺制定之后，进入开发阶段，开发人员的代码提交，通过Crucible完成Code review Bamboo构建策略采用定时构建，例如设置在晚上12点进行构建，从SVN中检出代码，跑单元测试，打包，自动部署到Tomcat上，并发送构建报告给项目成员，第二天产品经理和测试人员就可以通过测试环境对完成的任务进行测试，若发现问题，则进入JIRA创建BUG，待后续迭代修正  另外对Confluence、JIRA进行对比分析下：            优势 劣势 概念特征   Confluence 企业级的安全性；  搜索：跨页面，注释和附件间的搜索；    安装简单，易于管理；  组织：高效地创建灵活的页面结构；    简洁，友好的用户界面；  注释：进行小组讨论；    强大的构造和搜索功能；  重获：容易找到所需要的信息；    PDF导出和自动的重构；  导出：页面乃至整个空间可以导出为HTML，PDF，XML文件；    开放的API接口，灵活扩展和集成；  重构：高效的信息操作；      安全：高级的权限和安全性,权限控制非常合理、方便；      通知：通过mail/RSS来跟踪页面的内容变更；      定制：颜色，风格，整个站点的布局都可以定制；   JIRA JIRA Service Desk 为客户提供简单直观的用户体验，并拥有强大的SLA支持 、自定义服务队列、自动化请求管理以及形成实时报告等功能 JIRA对于国内用户提供的售后服务稍显弱一些，存在时间和沟通上的一些障碍。 JIRA贯穿业务核心线索的是“项目－Issue”    通过简单易用的导入工具，方便的将这些数据迁移到JIRA。 收费     JIRA Portfolio提供了单一、精确的视图，针对跨多个团队和项目的情况下，用来在JIRA系统中编制项目计划、管理项目活动。 自动的安排日程、能力规划，实时地反应和变更。 JIRA从使用上来说还是不大符合国人的使用逻辑     JIRA Capture可以更快持续地得到更多深度的反馈。 用JIRA Capture提交的Bug更容易被重现。开发人员可以在修复问题上花费时间而不是花费时间在从不完整的报告中重现问题。      Jira的二次开发.jira如创建问题，改变流程等可使用代码操纵。二次开发主要是做一个中间件，用来连接jira系统和其他系统从而实现系统之间的相互的通信，如创建一个问题(Issue)，对jira里一些问题(即Issue)信息的修改，流程步骤(workflowstep)的改变，添加与更新字段(Field)和自定义字段(customerField)的等等。此处用到了jira-rest-java-client包来实现对jira的访问。      好用，功能齐全，高可配置。 与GitLab可集成，实现需求与代码双向绑定。      JIRA的界面效果非常不错。安全性、可扩展性方面也不错。 JIRA的使用范围广，所以拥有众多开发者提供的扩展插件以供不同选择。      JIRA的工作流定制，这块功能实用性特别高，可定制性也很好。      JIRA针对issue驱动的项目管理非常有效，也基于多年来的插件积累，可以展现非常强大的交互、统计视图      TAPDTAPD（ Tencent Agile Product Development ）是源自于腾讯的敏捷研发协作平台，提供贯穿敏捷研发生命周期的一站式服务。覆盖从产品概念形成、产品规划、需求分析、项目规划和跟踪、质量测试到构建发布、用户反馈跟踪的产品研发全生命周期，提供了灵活的可定制化应用和强大的集成能力，帮助研发团队有效地管理需求、资源、进度和质量，规范和改进产品研发过程，提高研发效率和产品质量。产品功能  敏捷需求规划：对需求进行全周期管理。 迭代计划/跟踪 缺陷跟踪管理：可对缺陷进行全方位记录与跟踪，及时了解开发质量。 测试计划管理：编写并管理测试用例，制定测试计划并执行，能够实现对测试工作的管理。 任务工时管理：利用工时进行工作量统计，配合工时花费报告 项目文档管理：提供思维导图、在线文档、文件管理等功能，支持多人实时协作编辑，帮助团队集中管理项目文件。  TAPD的敏捷研发版本，管理整个研发生命周期：产品优势  独立封装的应用模块，支持根据研发模式按需组装。 开放集成，全面接口：多样的第三方集成方案，支持企业微信集成、Github \u0026amp; Gitlab 代码集成、CI \u0026amp; CD 持续发布集成等。丰富的 API 接口，支持基于 TAPD 进行个性化开放，打造多样化研发协作平台。 第三方服务集成： 企业微信：TAPD 与企业微信关联，支持任务管理、消息提醒，扫码登录，协作与沟通更加高效。   安全防护： 基础建设安全： 腾讯云安全防护：基于腾讯云的大禹、天御防护，底层隔绝高危入侵、DDos 攻击，多角度全方位进行业务防护。   客户数据安全： 数据备份/恢复 数据监控：对高危操作行为进行监控，实时发现异常并告警，同时采取强制下线、锁定帐号等若干紧急处理预案，避免数据泄漏、篡改等情况。      ONES Project（项目进度管理工具） ONES Project 是研发项目管理工具，支持敏捷开发全生命周期管理。产品定位  研发团队：查看任务需求，关联代码仓与Jenkins，通过静态代码检查工具分析代码质量，通过燃尽图和看板跟踪迭代进度。 产品团队：建立需求池，进行版本规划及迭代管理。 管理者：查看实时的可视化数据报表，多维度衡量项目进度与质量。  产品特色  可以结合持续集成平台 ONES Pipeline，将代码构建过程与项目、迭代整合到一起，实现可视化交付管理； 也可以结合测试用例管理工具 ONES TestCase 在迭代规划阶段，测试人员可以创建此迭代的相关用例，安排测试计划； 还可以结合ONES Wiki 记录需求文档、测试报告，做知识沉淀。 支持移动端，提供更人性化的服务支持：帮助用户随时随地追踪任务，实时了解项目进度。  禅道 产品功能  产品管理：产品、需求、计划、发布、路线图等功能。 项目管理：项目、任务、团队、build、燃尽图等功能。 质量管理：bug、测试用例、测试任务、测试结果等功能。 文档管理：产品文档库、项目文档库、自定义文档库等功能。 事务管理：todo管理，我的任务、我的Bug、我的需求、我的项目等个人事务管理功能。 组织管理：部门、用户、分组、权限等功能。 统计功能：多个统计表。 搜索功能：搜索找到相应的数据。 扩展机制，对禅道的很多地方可进行扩展。 api机制，与其他系统集成。  华为软件云 功能流程图 产品关键字：项目管理服务，云端项目管理，项目外包协作、配置管理，代码托管服务，跨地域协同开发、代码检查服务，代码质量管控，多语言代码检查、编译构建，开发编译构建，混合语言构建平台、部署管理_软件开发云_华为企业云、测试管理服务，测试解决方案，产品用例设计，测试活动管理、发布管理服务，软件仓库，软件快速发布、流水线_软件开发云_华为企业云用户构成华为软件开发云为to B 平台，主要面向具有开发业务的技术团队、组织或个人。产品特色  支持通过思维导图的形式对产品整体进行规划。 项目管理服务主要是通过工作项进行管理。 工作项（需求、任务、缺陷）管理支持看板式管理、拖拽式操作。 支持文档管理。 支持百科wiki知识库。 软件开发云的测试管理包括两部分：测试用例的管理和移动app测试。  测试用例管理包括用例设计、用例分配、用例执行；生成测试报告、测试排行榜；查看需求的测试覆盖率等    猪齿鱼优化方向 产品方向：  对总菜单栏进行流水线整合，明确层次，优化结构，可将大规模敏捷部分单独与敏捷服务、测试服务、DevOps进行并列分布。 对官网文档手册进行调研，从而对于手册的难度性调整以及效用转化率进行提高。 类似TAPD，对官网的内容进行选取反馈调查，同时可导出PDF，并进行编辑跳转到GIT上，增强文档的复用性及多平台应用推广。 官网手册动图引导操作，给出提示。  功能方向：  差异化场景下列出差异化的关键词，对于不同服务的场景可在入口页面提供差异化标志性的关键词及图标，降低各个服务的耦合性。 评论进行自定义筛选需求排序 可批量上传下载附件 优化组件，反馈列表、问题列表等下面可检索查询第几页的问题信息，可实现跳转 页面出现问题疑问，用户可以点击旁边的help，同时可以链接官网教程或者配套写出相关的提示，并对此help进行调研是否满意，进行反馈。 增加类似禅道的事务管理：todo管理，我的任务、我的Bug、我的需求、我的项目、我的贡献量等个人事务管理功能。但又区别于本身项目的dashboard。另外可增加个人任务导出甘特图，像禅道，截止日期、项目任务统计数、模块任务统计数、任务类型等子模块的统计导出 增加代码评审 像华为软件开发云支持通过思维导图的形式对产品整体进行规划。 像华为云一样，可以导出测试报告、测试排行榜（知道哪块问题出现的测试问题比较多，之后着重关注此部分的代码） 类似TAPD,版本中新增加的功能，除了通过官网同时发布的提示，在系统中对于新增的用户，点击相关操作会弹出框进行提示。如下图 同时新增“个人关注”的功能，在以后项目群做大了的同时，团队内部人想对某个内容进度等详情进行关注，可以有收藏的功能，动态更新的消息仍然可以通过原来的消息通知同步进行。 在我们的知识管理-文档管理中，可以增加有关“我的”的列表，对于自己关注评论感兴趣的知识空间文档可以进行持续跟进 文档管理里，可以支持脑图功能，同时一进入就可以看到该功能的简要介绍手册或者直接链接官网对应的操作文档。 可以猪齿鱼项目的主页菜单列表上加上版本升级、安全管理，其中版本升级中可以是迭代发布版本的升级，还有就是标准开源版和企业版的升级。 可以在测试管理模块，测试摘要模块中增加测试报告缺陷统计的一栏，对用例通过率、缺陷总数可以在这个总的统计摘要页面中总体筛选显示。 作为项目管理员或者其他上级人员，进入系统后，可以对某些问题或者任务进度等进行关注 可在菜单栏中增加帮助中心，里面有链接到官网的手册文档、猪齿鱼论坛社区、项目介绍等各类信息入口。 告知PI目标计算方法，优化下对数据结果的名称补充说明，将计算结果可右移 一个故事从一个迭代延续到下一个迭代时，故事状态在下一个迭代变成已完成时，被正确分类到冲刺报告图中已完成的问题列表内，但是在上一个迭代出现的已完成状态仍然显示在未完成的问题内，会导致状态和列表归属不匹配，引起歧义，可以优化下显示。 对PI目标进行编辑时，勾选延伸目标框，在列表中可直接显示这个延伸目标效果，不一定非要去卡片中查看。 优化指定史诗问题数量统计新增 增加大规模敏捷项目群报表统计菜单栏功能 知识模块管理支持实时上传创建PDF，不需要在评论中上传附件；对一大篇文字图片进行复制时，图片会丢失，而且只能一张一张上传；页面编辑停留过久后，会保存失败。  交互方面：  增强场景的交互性/细节性，比如为了减少用户的点击率，特性详情中故事点鼠标点击的交互体验可以省去显示故事点字样的步骤，一点击文本框就可以直接进行对带有故事点字样的框内进行数字的选择或者自己填的数字，从而减少鼠标点击率。 用例测试等删除操作隐藏太深了，可以将删除操作移动更显眼的一层。 组织层里的添加的字段，要显示的话需要先经过页面设置中，勾选框选中让他显示，才能在项目层的问题详情里看到该字段。可以优化一下，让添加的字段是默认显示的。  视觉方面：  改变信息陈列的布局来强化不同的重点或者进行信息归类化显示。比如加强筛选、排序的多功能操作，对不同的评论或者回复可自定义的方式过滤查看等。  运营方面：  注重PGC\\UGC产出率\\OGC ，加快资源分享的步伐，另外还可邀请业内相关的深度内容作者人士进行试用平台，以此来通过KOL的影响力来推广，从而使资源分布更加广阔。 适当在差异场景下可通过后台大数据分析或者用研方式来了解用户的难点、真实需求及伪需求，从而更好地促进平台的优化。  ","id":14,"section":"posts","summary":"具体对禅道、TAPD、Jira、华为软件云、ONES Project 平台进行分析整个逻辑操作流程、功能结构、页面布局等，并与猪齿鱼现有的内容进行整理对比。","tags":["竞品分析"],"title":"敏捷相关竞品对比分析","uri":"https://aotingxu.github.io/2019/07/%E6%95%8F%E6%8D%B7%E7%9B%B8%E5%85%B3%E7%AB%9E%E5%93%81%E5%88%86%E6%9E%90/","year":"2019"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }","id":15,"section":"posts","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","tags":["文档说明"],"title":"Emoji Support","uri":"https://aotingxu.github.io/2019/07/emoji-support/","year":"2019"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","id":16,"section":"posts","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":["文档说明"],"title":"Markdown Syntax Guide","uri":"https://aotingxu.github.io/2019/07/markdown-syntax/","year":"2019"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:\n     To enable KaTex globally set the parameter math to true in a project's configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions Examples Inline math: \\( \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… \\)\nBlock math:\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\n","id":17,"section":"posts","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","tags":null,"title":"Math Typesetting","uri":"https://aotingxu.github.io/2019/07/math-typesetting/","year":"2019"}],"tags":[{"title":"index","uri":"https://aotingxu.github.io/tags/index/"},{"title":"产品分析","uri":"https://aotingxu.github.io/tags/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90/"},{"title":"产品学习","uri":"https://aotingxu.github.io/tags/%E4%BA%A7%E5%93%81%E5%AD%A6%E4%B9%A0/"},{"title":"产品管理","uri":"https://aotingxu.github.io/tags/%E4%BA%A7%E5%93%81%E7%AE%A1%E7%90%86/"},{"title":"产品设计","uri":"https://aotingxu.github.io/tags/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"},{"title":"教程总结","uri":"https://aotingxu.github.io/tags/%E6%95%99%E7%A8%8B%E6%80%BB%E7%BB%93/"},{"title":"文档说明","uri":"https://aotingxu.github.io/tags/%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E/"},{"title":"竞品分析","uri":"https://aotingxu.github.io/tags/%E7%AB%9E%E5%93%81%E5%88%86%E6%9E%90/"},{"title":"能力提升","uri":"https://aotingxu.github.io/tags/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"},{"title":"能力模型","uri":"https://aotingxu.github.io/tags/%E8%83%BD%E5%8A%9B%E6%A8%A1%E5%9E%8B/"},{"title":"领域知识","uri":"https://aotingxu.github.io/tags/%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/"}]}